			   MicroService Service Communications


Services are represented by Apis

Apis are modeled in many ways

1.RPI
    -REST API
    -RPC - Grpc
    -GraphQl api
2.Message based
    -MOM
       -redis,RabbitMQ
    -Event driven Arch
       Vertx-Event Bus
       Kafka 

Service Communications:

REST: Rest to Rest - http
Quarkus Implmementations
  1.MicroProfile Rest Client -  both reactive and non reactive
  2.Vertx WebClient - By Default Reactive.
  3.Java 11 HttpClient - Sync and Async


MicroProfile Rest Client: Non Reactive
.......................................	
pom.xml
<dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-mutiny</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client-jackson</artifactId>
        </dependency>


There must be two HTTP services
 1.caller
     |
 2.callee

Communications between services are orachastrated by "RestClient"

Step 1:
Caller Service:
package org.acme.rest.client;

import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/greet")
public class GreetingService {
    
    @GET
    public String greet() {
        return "";
    }
}

User -----Gives Request to the caller -- GET /greet



Step 2:

Callee Service:
package org.acme.rest.client;


import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public String hello(){
        return helloService.sayHello();
    }
}
package org.acme.rest.client;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public String sayHello(){
        return "Hello Rest Client!!!!";
    }
}
..................................................................................


Step 3:

RestClient Interface - to facilitate Rest Service Communications.

package org.acme.rest.client;

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

//http://localhost:8080/hello
@RegisterRestClient
@Path("/hello") //Callee route end point
public interface HelloRestClientService {
    //methods
    @GET
    String sayHello();
}

1.Here we need to declare interface
2.Annotate interface with @RegisterRestClient
3.@Path("/hello") indicates the callee route url
4.HTTP method and apis mapping inside interface


Step 5:Configuring application.properties

#mapping the rest client
org.acme.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
org.acme.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.SingleTon


Step 6: Inject RestClient Interface into where ever you want to call.
package org.acme.rest.client;


import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/greet")
public class GreetingService {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    public String greet() {
        return helloRestClientService.sayHello();
    }
}

Step 7: Testing
 http://localhost:8080/greet
    It will delegate the request to another http service.
....................................................................................
			application.properties configuration Refactoring
.....................................................................................
org.acme.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
org.acme.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

Here keeping the package name is complex - we have short cut.

#mapping the rest client
#org.acme.rest.client.HelloRestClientService/mp-rest/url=http://localhost:8080
#org.acme.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

#Refactored Configuration.

hello-api/mp-rest/url=http://localhost:8080
hello-api/mp-rest/scope=javax.inject.Singleton


....................................................................................
			  REST API communication using Vertx-WebClient
....................................................................................

package org.acme.rest.client;

import io.smallrye.mutiny.Uni;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.web.client.HttpResponse;
import io.vertx.mutiny.ext.web.client.WebClient;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/greet")
public class GreetingService {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    //Grab Vertx Runtime instance
    @Inject
    Vertx vertx;
    WebClient webClient;

    @GET
    public String greet() {
        return helloRestClientService.sayHello();
    }

    @PostConstruct
    public void init() {
        webClient = WebClient.create(vertx, new WebClientOptions()
                .setDefaultHost("localhost")
                .setDefaultPort(8080)
        );
    }

    @GET
    @Path("/vertxclient")
    public Uni<String> greetVertx() {
        return webClient.get("/hello").send().onItem().transform(HttpResponse::bodyAsString);
    }
}
.....................................................................................
			Service Communications via Messages
			   (Event Driven Microservices)
				Using vertx Event Bus
....................................................................................

How to build loosly coupled microservices?


AKKA - Actor Model Based.

Actor model is architure model which describes how data can be exchanged among programs we call services using "message oriented and event driven".

Vertx inspired akka with respect to message passing techniques, now we can pass messages using vertx  "Event Bus".

Event Bus:
 -Event bus is object through which we can exchange messages async.
 -Event bus is just like message broker which in memory message broker
 -Event bus uses queue to store messages
 -Event bus communicates via tcp protocal
 -Event bus can exchange any type of data- including json.
 -Event can be used to send and receive messages across the system.

Quarkus can Use EventBus for message oriented communication.


Event Bus has its own in memory Event queue where all message published.

How consumer and publisher are connectected?

 Via address :Messages are sent on the event bus to an address.
address should be unique, can follow dns naming model

 ibm.order
 ibm.order.inventory


Types of message Delivery:

1.point to point -  
  send messages to only one consumer.
 eventbus.send
2.Publisher/Subscriber  - pub sub model
  One publisher many subscribers
  eventbus.publish
3.request/reply
    send messages to only one consumer with ack.



package org.acme.rest.client.messages;


import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/orders")
public class OrderResource {

    @Inject
    EventBus eventBus;

    @GET
    public String publishOrders() {
        JsonObject orders = new JsonObject().put("id", 1).put("desc", "Mainframes");
        //point to point -  one to one
        //eventBus.send("ibm.orders", orders);
        //pub- sub - one to many
        // eventBus.publish("ibm.orders",orders);
        //request-reply
        Uni<Message<String>> status = eventBus.request("ibm.orders", orders);
        System.out.println(status);
        status.onItem().transform(stringMessage ->{
            System.out.println(stringMessage);
            return stringMessage;
        }).subscribe();

         return  "Published";
//        return eventBus.<JsonObject>request("ibm.orders",orders).onItem().transform(Message::body);
    }
}

package org.acme.rest.client.messages;


import io.quarkus.vertx.ConsumeEvent;
import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.Message;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class OrderService {

    @ConsumeEvent("ibm.orders-dummy")
    public void processOrder(Message<JsonObject> orders) {
        System.out.println("Order Service");
        System.out.println(orders.body().encodePrettily());
    }
}

package org.acme.rest.client.messages;

import io.quarkus.vertx.ConsumeEvent;
import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.Message;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class InventoryService {
    @ConsumeEvent("ibm.orders")
    public void processOrder(Message<JsonObject> orders) {
        System.out.println("Inventory Service");
        System.out.println(orders.body().encodePrettily());
    }

//    @ConsumeEvent("ibm.orders")
//    public Uni<String> processOrder(Message<JsonObject> orders){
//          orders.body().encode()
//     }
}
.....................................................................................

Request-Reply:
package org.acme.rest.client.messages;


Publisher:

import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

@Path("/orders")
public class OrderResource {
    @Inject
    EventBus bus;
    @GET
    public Uni<String> publishOrders() {
        JsonObject orders = new JsonObject().put("id", 1).put("desc", "Mainframes");
        return bus.<String>request("google.orders", orders)
                .onItem().transform(stringMessage -> stringMessage.body());
    }
}

Consumer:
package org.acme.rest.client.messages;


import io.quarkus.vertx.ConsumeEvent;
import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.Message;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class OrderService {
    @ConsumeEvent("google.orders")
    public void orders(Message<JsonObject> order) {
        System.out.println(order.body());
        order.reply("order processed");        
    }
}
.....................................................................................
		  Event Sourcing -Microservice Design Pattern
.....................................................................................
A service need to messages to another service.
   Message oriented Communication

Highly loosly coupled communications,This pattern already there in the monolithic applications for integrating with third party system or inter system communication or 
long running process.

Implmenetations in Quarkus:

1.SmallRye Reactive Messaging
  SmallRye Reactive Messaging is a framework for building event-driven, data streaming, and event-sourcing applications using CDI.
 It lets your application interaction using various messaging technologies such as Apache Kafka, AMQP or MQTT. 
The framework provides a flexible programming model bridging CDI and event-driven.

Core Concepts of Reactive Messaging:
....................................

1.Message
   It is wrapper which contains "payload(data) + meta data"
   The App can pusblish message(publisher) and can process message(consumer)

2.Channel
   It is logical pipeline through which Messages are transmitted.

3.Connector
   It is a code which connects brokers which is software which has Messages.

Programming Model:
 Reactive Messaging uses CDI annotations to abstract underlying message brokers


Annotations:

org.eclipse.microprofile.reactive.messaging.Incoming - indicates the consumed channel

org.eclipse.microprofile.reactive.messaging.Outgoing - indicates the populated channel

import org.eclipse.microprofile.reactive.messaging.Message;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class MessageProcessingBean {

    @Incoming("consumed-channel")
    @Outgoing("populated-channel")
    public Message<String> process(Message<String> in) {
        // Process the payload
        String payload = in.getPayload().toUpperCase();
        // Create a new message from `in` and just update the payload
        return in.withPayload(payload);
    }
}
..................................................................................

Sample Code Work Flow:
......................

@Outgoing("source")
public Multi<String> generate() {
    return Multi.createFrom().items("Hello", "from", "reactive", "messaging");
}

@Incoming("source")
@Outgoing("sink")
public String process(String in) {
    return in.toUpperCase();
}

@Incoming("sink")
public void consume(String processed) {
    System.out.println(processed);
}
generate --> [ source ] --> process --> [ sink ] --> consume

only @Outgoing are used to generate messages or payloads

only @Incoming are used to consume messages or payloads

both @Incoming and @Outgoing are used to process messages or payloads; or transform the stream == Creating Messages
....................................................................................
		SmallRye Reactive Messaging With Apache Kafka
...................................................................................			
Req:
 1.Quarkus App with necessary dependency
 2.Kafka 
    -Dev 
	Quarkus offers Kafka as dev service
      quarkus-smallrye-reactive-messaging-kafka
    -Production

Application Arch:

 There will be two application

 1.Producer App which produces messages and stores into Kafka
 2.Consumer App which receives messages from the Kafka and process them, transfers to    again producer applications.

pom.xml:
 <dependency>
         <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
        </dependency>
       
Steps:
1.Producer :

 POST /quotes/request
    -publish data into Kafka cluster
 GET /quotes
    -Consumes From the Kafka cluster after processing.


Models:
package org.acme.kafka.model;

public class Quote {

    public String id;
    public int price;

    /**
     * Default constructor required for Jackson serializer
     */
    public Quote() { }

    public Quote(String id, int price) {
        this.id = id;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "id='" + id + '\'' +
                ", price=" + price +
                '}';
    }
}

Serialzer: 
package org.acme.kafka.model;

import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;

public class QuoteDeserializer extends ObjectMapperDeserializer<Quote> {
    public QuoteDeserializer() {
        super(Quote.class);
    }
}

QuoteResource:
package org.acme.kafka.producer;

import java.util.UUID;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.acme.kafka.model.Quote;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;

import io.smallrye.mutiny.Multi;

// POST /quotes/request -  send data to the Channel
// GET  /quotes   -  Consume data from the channel
@Path("/quotes")
public class QuotesResource {

    @Channel("quote-requests")
    Emitter<String> quoteRequestEmitter;

    /**
     * Endpoint to generate a new quote request id and send it to "quote-requests" Kafka topic using the emitter.
     */
    @POST
    @Path("/request")
    @Produces(MediaType.TEXT_PLAIN)
    public String createRequest() {
        UUID uuid = UUID.randomUUID();
        quoteRequestEmitter.send(uuid.toString());
        return uuid.toString();
    }

    @Channel("quotes")
    Multi<Quote> quotes;

    /**
     * Endpoint retrieving the "quotes" Kafka topic and sending the items to a server sent event.
     */
    @GET
    @Produces(MediaType.SERVER_SENT_EVENTS) // denotes that server side events (SSE) will be produced
    public Multi<Quote> stream() {
        return quotes.log();
    }
}
................................
PS E:\session\IBM\2022\oct\quarkus-session\kafka-quickstart> mvn -f producer quarkus:dev
PS E:\session\IBM\2022\oct\quarkus-session\kafka-quickstart> mvn -f processor quarkus:dev

http://localhost:8080/quotes.html
.....................................................................................
			Service Registry and Discovery
..................................................................................

What is Service Registry and Discovery?

 Services typically need to call one another.

 In a monolithic application, services invoke one another through language-level method or procedure calls.

 In a traditional distributed system deployment, services run at fixed, well known locations (hosts and ports) and so can easily call one another using HTTP/REST or some RPC mechanism. 

However, a modern microservice-based application typically runs in a virtualized or containerized environments where the number of instances of a service and their locations changes dynamically.

Consequently, you must implement a mechanism for that enables the clients of service to make requests to a dynamically changing set of ephemeral service instances.


How does the client of a service - the API gateway or another service - discover the location of a service instance?


Solution
When making a request to a service, the client obtains the location of a service instance by querying a Service Registry, which knows the locations of all service instances.
...................................................................................
         Quarkus and Service Registry and Discovery implmentation	
..................................................................................

SmallRye Strok
  SmallRye Stork 1.3.2 is a service discovery and client-side load-balancing framework.

The essence of distributed systems resides in the interaction between services. In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy. But, how do you select the best instance of your service? That’s where Stork helps. Stork is going to select the most appropriate instance. It offers:

Extensible service discovery mechanisms
Built-in support for Consul and Kubernetes
Customizable client load-balancing strategies
A programmatic API and a managed approach
A Quarkus integration, but Stork can be used in any environment 


Service Registry:
  It is a database which can store all services with serviceName and its location

Service Registry Implmenetations are Apache zookeer,Consul,DNS,Kubernets,Eureka..

Strok is just abstraction(apis) which binds registrys for registration,discovery,load balancing

 Client [Strok][loadBalancer]-----|Consul--
			

Strok offers lot of Load balancer Algorithim

1.Round Robin
2.Random
3.Least Requests
4.Response Time
5.Power Of Two Choices
6.Sticky
7.Custom Load Balancer

Implementations in Quarkus:

Req:
 1.Quarkus App need same RestClient dependency but it should be Reactive
   quarkus-rest-client-reactive
  
 2.Registry Server - Consul
   <dependency>
    <groupId>io.smallrye.stork</groupId>
    <artifactId>stork-service-discovery-consul</artifactId>
    <version>1.3.2</version>
  </dependency>

  <dependency>
    <groupId>io.smallrye.reactive</groupId>
    <artifactId>smallrye-muntiny-vertx-consul-client</artifactId>
    <version>1.3.2</version>
  </dependency>

3.Start Registry Server.


...............

pom.xml
All dependency must be reactive:
 <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-stork</artifactId>
        </dependency>
        <dependency>
            <groupId>io.smallrye.stork</groupId>
            <artifactId>stork-service-discovery-consul</artifactId>
        </dependency>
        <dependency>
            <groupId>io.smallrye.reactive</groupId>
            <artifactId>smallrye-mutiny-vertx-consul-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>


Front End Resource:

package org.acme;

import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return helloRestClientService.sayHello();
    }
}

RestClientInterface:

package org.acme;

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

@RegisterRestClient(configKey = "hello-api")
@Path("/hello")
public interface HelloRestClientService {
    //methods
    @GET
    String sayHello();
}

application.properties 
consul.host=localhost
consul.port=8500

hello-api/mp-rest/url=stork://hello-service
hello-api/mp-rest/scope=javax.inject.Singleton

quarkus.stork.hello-service.service-discovery.type=consul
quarkus.stork.hello-service.service-discovery.consul-host=localhost
quarkus.stork.hello-service.service-discovery.consul-port=8500


Consumer Services:
package org.acme;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public String hello(){
        return helloService.sayHello();
    }
}
package org.acme;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public String sayHello(){
        return "Hello stork Rest Client!!!!";
    }
}
Registration Bean:
..................
package org.acme.servicediscovery;

import io.quarkus.runtime.StartupEvent;
import io.vertx.ext.consul.ConsulClientOptions;
import io.vertx.ext.consul.ServiceOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.consul.ConsulClient;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;

@ApplicationScoped
public class Registration {

    @ConfigProperty(name = "consul.host")
    String host;
    @ConfigProperty(name = "consul.port")
    int port;

    @ConfigProperty(name = "hello-service-port", defaultValue = "8080")
    int hello;

    public void init(@Observes StartupEvent ev, Vertx vertx) {

        ConsulClient client = ConsulClient.create(vertx, new ConsulClientOptions()
                .setHost(host).setPort(port));

        client.registerServiceAndAwait(
                new ServiceOptions().setPort(hello).setAddress("localhost").setName("hello-service").setId("hello"));

    }
}

Filters:
package org.acme.servicediscovery;


import io.vertx.core.http.HttpServerRequest;
import org.jboss.logging.Logger;
import org.jboss.resteasy.reactive.client.spi.ResteasyReactiveClientRequestContext;
import org.jboss.resteasy.reactive.client.spi.ResteasyReactiveClientRequestFilter;

import javax.ws.rs.ext.Provider;

@Provider
public class CustomLoggingFilter implements ResteasyReactiveClientRequestFilter {

    private static final Logger LOG = Logger.getLogger(CustomLoggingFilter.class);

    @Override
    public void filter(ResteasyReactiveClientRequestContext requestContext) {
        LOG.infof("Resolved address by Stork: %s",requestContext.getUri().toString());
    }
}

Steps:
docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501

Testing:
http://localhost:8500/ui/dc1/services 
http://localhost:8080/greet
..................................................................................
			Reliability -MicroService Pattern
.................................................................................
What is fault?

Any System Subject to fail.

Layers of system and its failures

-Hardware failures
-OS Failures
-Network failures
-Application failures

Software failures:
..................
->JVM failures
  -out of memory
  -heap dump errors
  -process related errors
  -thread related errors
-How to fix failures
  -there tools available to detect memories,threads,heap dump 
   -jmeter,heapdump errors, apache benchmark....

Application failures:

->Exception handling
 file handling,database handling, call third party apis,networking, biz use case failures.

-How to fix application errors
  -Exception handlers--- give report , we can decide what do.

try{
 //what type of code i can write
 //The code subject to fail, risky code. : The code may cause error any time.

}
catch(Exception e){
  //for recovery code.
  //you can report to other code or ui
  //you can log those errors, you can audit latter.
}
..............................................................................................
				Micro Services and Error Handling
..............................................................................................

You have to have idea that the system will fail at any point of time, if failure comes how to handle that.

System failures and how to handle via patterns: Resilience Patterns:

Quarkus and Falut Tolerance: 
  Quarkus provides MicroProfile Fault Tolerance apis. 


Fault Tolerance provides developers with the following strategies for dealing with failure:


1.Timeout: Define a maximum duration for execution

2.Retry: Attempt execution again if it fails

3.Bulkhead: Limit concurrent execution so that failures in that area can’t overload the whole system

4.CircuitBreaker: Automatically fail fast when execution repeatedly fails

Solution /Handle any type failures:
...................................
Fallback: Provide an alternative solution when execution fails
....................................................................................


How to apply fault Tolerance?

   Fault Tolerance provides an annotation for each strategy which can be placed on the methods of CDI beans. When an annotated method is called, the call is intercepted and the corresponding fault tolerance strategies are applied to the execution of that method.
.....................................................................................
			Quarkus Falut Tolerance implmentations


 <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-fault-tolerance</artifactId>
  </dependency>

Pattern -1: Bulk Head


BulkHead:
   The idea behind bulkhead is to set a limit on the number of concurrent calls we make to a remote service.

 The Bulkhead pattern is to prevent faults in one part of the system from cascading to the entire system, which might bring down the whole system. The implementation is to limit the number of concurrent requests accessing to an instance.

@Bulkhead(5) // maximum 5 concurrent requests allowed
public Connection serviceA() {
       Connection conn = null;
       conn = connectionService();
       return conn;
}
Steps:
import org.eclipse.microprofile.faulttolerance.Bulkhead;
import org.eclipse.microprofile.faulttolerance.Fallback;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/bulk")
public class BulkHeadResource {

    @GET
    @Bulkhead(value = 5)
    @Fallback(fallbackMethod = "handleBulkHead")
    public Response dontOverload() {
        System.out.println("Api is called");
        return Response.ok("bulk").build();
    }

    public Response handleBulkHead() {
        System.out.println("fallback response");
        return Response.ok("sorry System busy").build();
    }
}

How to test bulk head?

you have to install any load testing tool
-apache benchmark
-Soap UI benchmark
-node based tools
 -loadtest

How to install load test?

npm install loadtest -g

>loadtest -n 100 -c 10 http://localhost:8080/bulk
.....................................................................................
			   Timeout
....................................................................................

What is Timeout?
   Setting a limit on the amount of time we are willing to wait for an operation to complete is called time limiting.
   If the operation does not complete within the time we specified, we want to be notified about it with timeout Error.

Sometime it is refered to as "setting a deadline"

  @Timeout(400) // timeout is 400ms
   public Connection serviceA() {
       Connection conn = null;
       conn = connectionService();
       return conn;
}


import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Timeout;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/timeout")
public class TimeoutResource {

    @GET
    @Timeout(5000)
    @Fallback(fallbackMethod = "getFromCache")
    public String delay() throws InterruptedException {
        randomDelay();
        return "Hello";
    }

    private void randomDelay() throws InterruptedException {
        // introduce some artificial delay
        Thread.sleep(6000);
    }

    public String getFromCache() {
        return "Fallback Response";
    }
}

..............................................................................................	

				 Fail fast and Fail slow -later
					 Retry
.............................................................................................

Fail fast:
 As soon as failure is dedecuted, either we throw exception, or we redirect with fallback.

eg:
  in Bulkhead 
   if more conncurrency access than expected , it will throw BulkHeadExection, if exception
 you can handle via fallback.

  In Timeout
   if there is delay in response than expected timeout , it will throw TimeoutExection, if exception  you can handle via fallback.

SOme times i need to give a chance to recover from the failures.

For eg , i call api, which fails due to network failure, i dont want to handle exception, i need to give chance to recover from those errors.

Re-try - try automatically n of times within some time period of time.

When you retry you can  customize when to retry.

eg: 
  i dont want to retry for SocketException,FileNotFoundException,MemoryoverFlowException
  biz use cases like Login
  if login failed in first attempt, dont retry.

import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Retry;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;

@Path("/retry")
public class RetryResource {
    private AtomicLong counter = new AtomicLong(0);
    private Float failRatio = 0.5f;

    @GET
    @Retry(maxRetries = 1, retryOn = RuntimeException.class)
    @Fallback(fallbackMethod = "fallbakcoffeesList")
    public List<String> coffees() {
        final Long invocationNumber = counter.getAndIncrement();
        maybeFail(String.format("CoffeeResource#coffees() invocation #%d failed", invocationNumber));
        System.out.println("RetryResource#coffees() invocation #%d returning successfully" + invocationNumber);
        return List.of("Coffee With Sugar", "Coffee Without Sugar", "Black Coffee");
    }

    public List<String> fallbakcoffeesList() {
        System.out.println("Fallback");
        return new ArrayList<>();
    }

    private void maybeFail(String failureLogMessage) {
        // introduce some artificial failures
        if (new Random().nextFloat() < failRatio) {
            System.out.println(failureLogMessage);
            throw new RuntimeException("Resource failure.");
        }
        //throw new RuntimeException("Resource failure.");
    }
}
.....................................................................................
				import org.eclipse.microprofile.faulttolerance.CircuitBreaker;
import org.eclipse.microprofile.faulttolerance.Fallback;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;

@Path("/cb")
public class CircuitBreakerResource {
    private AtomicLong counter = new AtomicLong(0);

    @GET
    @CircuitBreaker(successThreshold = 10, requestVolumeThreshold = 4, failureRatio = 0.75, delay = 1000)
    @Fallback(fallbackMethod = "cbFallback")
    public Response circuitBreakerApi() {
        maybeFailcb();
        return Response.ok(new Random().nextInt(30)).build();
    }

    public Response cbFallback() {
        return Response.ok().entity(100000).build();
    }

    private void maybeFailcb() {
        final Long invocationNumber = counter.getAndIncrement();
        if (invocationNumber % 4 > 1) {
            throw new RuntimeException("Service failed");
        }
    }
}


