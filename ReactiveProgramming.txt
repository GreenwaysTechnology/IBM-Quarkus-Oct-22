			 Reactive Programming
.....................................................................................

What is Reactive Programming?

 It is programming model which has been on the top of various industry standard design patterns and pricinciples to optimize the building distributed apps(micro service)

1.NonBlocking Arch , Async
2.Observer pattern 
     -Core design pattern for building event driven arch
 Publisher publishes events  - data,error,complete
 Subscriber subscribe events - success,error,complete
3.iterator pattern
   Pull data - tradtional iterator
   Reactive Pull - Push
4.functional programming style
   -hof - higher order function
   -pure function and immutablity = declarative, programming  - concurrency

Reactive programming offers the programming model which helps to process data(messages) in motion.

The term called Stream became very popular in reactive programming with respect to data transfer.

Data Processing:

  Data processing is done generally at database side
  LINQ - Application language to process data in the application memory

LINQ Apis are used to process data like filtering,transfering,aggrating....
LINQ Called those apis "operators" 

Birth of reactive programming.....
....................................................................................  
		     Standards of Reactive Programming
....................................................................................

Standards define how to build efficient distributed system using reactive principles
https://www.reactivemanifesto.org/

Reactive Streams
   It is built for java.
   Provides spec and apis how to handle back pressure in non blocking message work    flows.
   It is common/unified api for many implementators
https://www.reactive-streams.org/

Reactive Programming implemenation:
...................................

Reactive programming concepts are language independent.

Java Implmentation:
...................
1.Rxjava
2.Project Reactor -  used by Spring Framework by default.
3.SmallRye Muntiny - Red hat...


Mutiny was built by Red hat team
Mutiny first integrated with Quarkus, later with Vertx.
Mutiny is reactive stream certified
Mutiny is the perfect companion to tame the async nature of apps with non blocking io.
.....................................................................................
			 Quarkus and mutiny

Quarkus provides mutiny as stream processing,message passing lib along with vertx engine to leverge non blocking arch.

Where ever you see the reactive-** dependency , which is powered with muntiny.

When ever you add reactive dependency, Vertx Engine's event loop threads are activated/non blocking threads...
....................................................................................
			 Core Concepts of Muntiny
....................................................................................

Publisher:
  Object - Provider of data 
Subscriber:
  Object - Receiver of data
Subscription -
   Object who conects Publisher and Subscriber in back end.
Operators 
   Are apis provided to process "stream of data"


Uni
  A Uni represents a stream that can only emit either an item or a failure event.
Multi
A Multi represents a stream of data. A stream can emit 0, 1, n, or an infinite number of items.

Both are objects created by using factory apis

package com.ibm.reactive.streams;

import io.smallrye.mutiny.Uni;

public class FirstUni {
    public static void main(String[] args) {
        Uni<String> uniStream = Uni.createFrom().item("Hello World");
        //subscribe
        uniStream.subscribe().with(item -> System.out.println(item));

        new GreeterService(new HelloWorldService()).sayHello();
    }
}
...
package com.ibm.reactive.streams;

public class GreeterService {
    private HelloWorldService helloWorldService;

    public GreeterService() {

    }

    public GreeterService(HelloWorldService helloWorldService) {
        this.helloWorldService = helloWorldService;
    }

    public void sayHello() {
        helloWorldService.sayHello().subscribe().with(System.out::println);
    }
}
package com.ibm.reactive.streams;

import io.smallrye.mutiny.Uni;

public class HelloWorldService {

    //api to return stream
    public Uni<String> sayHello(){
        return Uni.createFrom().item("Hello World");
    }
}

Error:

package com.ibm.reactive.streams;

import io.smallrye.mutiny.Uni;

public class UniWithFailure {
    public static void main(String[] args) {
      Uni<String> stream =  Uni.createFrom().failure(new RuntimeException("oops"));

      stream.subscribe().with(System.out::println);


    }
}
.....................................................................................
			Bizlogic with Streaming
.....................
package com.ibm.reactive.streams.uni;


import io.smallrye.mutiny.Uni;

class LoginService {
    public Uni<String> auth(String name, String password) {
        if (name.equals("admin") && password.equals("admin")) {
            return Uni.createFrom().item("Login Success");
        }
        return Uni.createFrom().failure(new RuntimeException("Login Failed"));
    }
}

public class UniWithSuccessOrFailure {
    public static void main(String[] args) {
        LoginService login = new LoginService();
        login.auth("admin", "admin").subscribe().with(status -> {
            System.out.println(status);
        }, err -> {
            System.out.println(err.getMessage());
        });
        login.auth("foo", "admin").subscribe().with(status -> {
            System.out.println(status);
        }, err -> {
            System.out.println(err.getMessage());
        });
    }
}
................
Multi:
package com.ibm.reactive.streams.uni;

import io.smallrye.mutiny.Multi;

public class MulitStream {
    public static void main(String[] args) {
        Multi<Integer> itemsStream = Multi.createFrom().items(1, 2, 3, 4, 5);
        //subscribe
        itemsStream.subscribe().with(item -> {
            System.out.println(item);
        }, err -> {
            System.out.println(err);
        }, () -> {
            System.out.println("Completed");
        });
        //emitting more values : 1..100
        Multi.createFrom().range(1,100).subscribe().with(item -> {
            System.out.println(item);
        }, err -> {
            System.out.println(err);
        }, () -> {
            System.out.println("Completed");
        });

    }
}
....................................................................................

Reactive Program enables streaming data via events among applications
Reactive program even helps to process streaming data among application

Pipe lines
SourceData-----|Stream-----Processing--------Stream --Processing
                  (5 items)    (3)             (3) with modified 
                                              

package com.ibm.reactive.streams.processing;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;

public class StreamProcessing {
    public static void main(String[] args) {
        //uniStreamProcessing();
        multiStreamProcessing().select()
                .where(n -> n % 2 == 0)
                .select().first(5)
                .select().distinct()
                .onItem().transform(n -> "[" + n + "]")
                .subscribe().with(System.out::println);
    }

    private static Multi<Integer> multiStreamProcessing() {
        //filter even numbers
        return Multi.createFrom()
                .range(1, 101);

    }

    private static void uniStreamProcessing() {
        Uni.createFrom()
                .item(2)
                .onItem()
                .transform(item -> item * 2)
                .subscribe().with(System.out::println);
    }
}
..................................................................................
			 Handling errors

How to throw Exception and Print stack trace?
			       
			       |- you do this
stream.failure() -error-onError|- you do that
				- you dont anything

package com.ibm.reactive.streams.errhandling;

import io.smallrye.mutiny.Uni;
import io.smallrye.mutiny.subscription.UniEmitter;

import java.util.concurrent.ThreadLocalRandom;

public class RetryHandler {
    public static void main(String[] args) {
        Uni.createFrom().emitter(emitter -> {
                    generate(emitter);
                }).onFailure()
                .invoke(() -> System.out.println("failed"))
                .onFailure().retry().atMost(50)
                .subscribe().with(System.out::println, System.out::println);
    }

    private static void generate(UniEmitter<? super Object> emitter) {
        if (ThreadLocalRandom.current().nextDouble(0.0d, 1.0d) < 0.05d) {
            emitter.complete("Success");
        } else {
            emitter.fail(new RuntimeException("Something went Wrong!"));
        }
    }
}
.....................................................................................
			Quarkus Reactive System and Non blocking


Quarkus from day1 been built on the reactive standards and non blocking arch with vertx engine and netty.

Quarkus apps are highly resource effect apps.

Quarkus has re written all microprofile specification with "reactive".

...................................................................................
			  Threading models in Quarkus
...................................................................................

There are two threading models

1.Event loop thread
  threads which handles events from the kernal
  No of event loop threads are eq no cpu core
 
2.Worker pool thread
    Dedicated threads - blocking threads

  if you any operations on this thread, which is blocked by default
 

Basic Reactive End Point:
package org.acme;


import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import java.util.List;

@Path("/api/users")
public class UserResource {

    //This is running in worker pool thread : Dedicated thread
    @GET
    public String getUserInfo() {
        System.out.println("User Info End Point => " + Thread.currentThread().getName());
        return "User";
    }
    //Event loop: how to schedule this request in non-blocking mode

    @GET
    @Path("/reactive")
    public Uni<String> getUserReactiveInfo(){
        System.out.println("Reactive End point => " + Thread.currentThread().getName());
        return Uni.createFrom().item("Hello reactive");
    }

    @GET
    @Path("/reactive/multi")
    public Multi<List<String>> getUsers(){
        System.out.println("Reactive End point -2 => " + Thread.currentThread().getName());

        return Multi.createFrom().item(List.of("Subramanian","Karhtik"));
    }


}
...................................................................................
			The Golden Rule - Don’t Block the Event Loop
...................................................................................

What if your rest api is reactive(nonblocking), executed by event loop thread....
The api is going to call service layer which has blocking code...

Blocking code

1.thread.sleep - blocks the current thread.
2.long running cpu taks - long while or for loops
3.tradtional db or thrid party calls
4.long network calls 
5.file io calls

package org.acme;

import io.smallrye.mutiny.Uni;
import org.acme.service.HelloService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/api/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello() throws Exception {
        System.out.println("Hello =>" + Thread.currentThread().getName());
        return Uni.createFrom().item(helloService.hello());
    }
}

package org.acme.service;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public String hello() {
        //delay response
        try {
            Thread.sleep(3000);

        }
        catch (InterruptedException es){

        }
        return  "Hello delayed response";
    }
}

After running this eg: you will get exception like below

Thread[vert.x-eventloop-thread-1,5,main] has been blocked for 2090 ms, time limit is 2000 ms: io.vertx.core.Ve
rtxException: Thread blocked
        at java.base@11.0.11/java.lang.Thread.sleep(Native Method)
        at org.acme.service.HelloService.hello(HelloService.java:11)
        at org.acme.service.HelloService_Subclass.hello$$superforward1(Unknown Source)
        at org.acme.service.HelloService_Subclass$$function$$7.apply(Unknown Source)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:54) 
        at io.quarkus.arc.runtime.devconsole.InvocationInterceptor.proceed(InvocationInterceptor.java:62)   
        at io.quarkus.arc.runtime.devconsole.InvocationInterceptor.monitor(InvocationInterceptor.java:49)   
        at io.quarkus.arc.runtime.devconsole.InvocationInterceptor_Bean.intercept(Unknown Source)
        at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
        at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:41) 
        at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:33)
        at org.acme.service.HelloService_Subclass.hello(Unknown Source)
      

Generally Event loop threads(Non blocking threadings) can be blocked for "2000ms" only - blocking time out for  event loop thread.

Beyond the time if thread is blocked, system will throw exception "Thread Blocked Exception".

Wrting blocking code inside non blocking code is not recommended but what if i want.

Solution is write blocking in dedicated thread and submit the result to non blocking thread.

@Blocking:
  Annotate on the rest api where you are calling blocking api..
package org.acme;

import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;
import org.acme.service.HelloService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/api/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    @Blocking
    public Uni<String> hello() throws Exception {
        System.out.println("Hello =>" + Thread.currentThread().getName());
        return Uni.createFrom().item(helloService.hello());
    }
}

























































